"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findRollupBundleEntry = findRollupBundleEntry;
const assert_js_1 = require("./assert.js");
const isNullish_js_1 = require("./isNullish.js");
const path_1 = __importDefault(require("path"));
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const usageHints_js_1 = require("../shared/usageHints.js");
// - `entry.name` can be `undefined` (which is unexpected)
//   - It's unexpected in both situations:
//     - If we use injectRollupInputs() then we explicitly set the name to `entryName`
//     - If we use this.emitFile() then we also explicitly set the name to `entryName`
//   - I think (I ain't sure) `name` can be `undefined` only when using this.emitFile()
//   - https://github.com/brillout/vite-plugin-server-entry/issues/18
// - Weird randomness of `entryName` being included twice: https://github.com/brillout/vite-plugin-server-entry/issues/20
//   - We use `key.startsWith(keyStart)` to pick the right one
function findRollupBundleEntry(entryName, bundle, outDir) {
    let found = null;
    let foundWithWrongOutputPath = null;
    const keyStart = `${entryName}.`;
    for (const key in bundle) {
        if (key.endsWith('.map'))
            continue; // https://github.com/brillout/vite-plugin-ssr/issues/612
        const entry = bundle[key];
        if (entry.name === entryName || key.startsWith(keyStart)) {
            if (!key.startsWith(keyStart)) {
                foundWithWrongOutputPath = key;
            }
            else {
                if (found) {
                    (0, assert_js_1.assert)(false, {
                        entryName,
                        names: Object.values(bundle)
                            .map((entry) => entry.name)
                            .filter(isNullish_js_1.isNotNullish),
                        keys: Object.keys(bundle),
                    });
                }
                found = entry;
            }
        }
    }
    if (!found && foundWithWrongOutputPath) {
        const pathActual = path_1.default.posix.join(outDir, 'server', foundWithWrongOutputPath);
        const pathCorect = path_1.default.posix.join(outDir, 'server', 'entry.{js,mjs}');
        (0, assert_js_1.assertUsage)(false, `Found build server entry ${picocolors_1.default.cyan(entryName)} (as expected) but it's saved at ${picocolors_1.default.bold(picocolors_1.default.red(pathActual))} which is unexpected: it should be saved at ${picocolors_1.default.bold(picocolors_1.default.green(pathCorect))} instead. ${usageHints_js_1.usageHintRollupEntryNames}.`);
    }
    return found;
}
