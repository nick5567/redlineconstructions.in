export { createPageContextServerSide };
export { createPageContextServerSideWithoutGlobalContext };
export type { PageContextCreated };
import type { GlobalContextServerInternal } from '../globalContext.js';
import type { PageContextInit } from '../renderPage.js';
type PageContextCreated = Awaited<ReturnType<typeof createPageContextServerSide>>;
declare function createPageContextServerSide(pageContextInit: PageContextInit, globalContext: GlobalContextServerInternal, { isPrerendering, ssr: { urlHandler, isClientSideNavigation }, }: {
    isPrerendering: false;
    ssr: {
        urlHandler: null | ((url: string) => string);
        isClientSideNavigation: boolean;
    };
} | {
    isPrerendering: true;
    ssr?: undefined;
}): {
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: false;
    isPrerendering: boolean;
} & Pick<import("../../../types/PageContext.js").PageContextInternalServer, "urlOriginal" | "headersOriginal"> & {
    url?: string;
    headers?: Record<string, string>;
} & {
    _globalContext: {
        isGlobalContext: true;
        _isOriginalObject: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../../types/PageConfig.js").PageConfigRuntime[];
        _pageConfigGlobal: import("../../../types/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        _vikeConfigPublicGlobal: {
            config: import("../../../types/index.js").ConfigResolved;
            _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
        };
        config: import("../../../types/index.js").ConfigResolved;
        pages: {
            [k: string]: import("../../../shared/page-configs/resolveVikeConfigPublic.js").VikeConfigPublicPageEager;
        };
    } & ({
        _isProduction: false;
        _isPrerendering: false;
        assetsManifest: null;
        _viteDevServer: import("vite").ViteDevServer;
        viteConfig: import("vite").ResolvedConfig;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
    } | {
        _isPrerendering: true;
        viteConfig: import("vite").ResolvedConfig;
        _isProduction: true;
        assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
    } | {
        _isPrerendering: false;
        viteConfig: null;
        _isProduction: true;
        assetsManifest: import("../../../types/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
    });
    _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
    _baseServer: string;
    _baseAssets: string;
    _pageContextInit: PageContextInit;
    _urlRewrite: null;
    _urlHandler: ((url: string) => string) | null;
    isClientSideNavigation: boolean;
} & {
    config: import("../../../types/index.js").ConfigResolved;
    _source: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    _sources: import("../../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    _from: import("../../../shared/page-configs/resolveVikeConfigPublic.js").From;
} & {
    urlParsed: import("../utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & {
    headers: Record<string, string> | null;
};
declare function createPageContextServerSideWithoutGlobalContext(pageContextInit: PageContextInit): {
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: false;
    isPrerendering: boolean;
} & Pick<import("../../../types/PageContext.js").PageContextInternalServer, "urlOriginal" | "headersOriginal"> & {
    url?: string;
    headers?: Record<string, string>;
};
