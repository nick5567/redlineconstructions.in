export { renderPage };
export { renderPage_addAsyncHookwrapper };
export type { PageContextInit };
export type { PageContextBegin };
import { type GlobalContextServerInternal } from './globalContext.js';
import { type HttpResponse } from './renderPage/createHttpResponse.js';
import type { PageContextServer } from '../../types/index.js';
import type { PageContextInternalServer } from '../../types/PageContext.js';
type PageContextInit = Pick<PageContextInternalServer, 'urlOriginal' | 'headersOriginal'> & {
    /** @deprecated Set `pageContextInit.urlOriginal` instead  */ url?: string;
    /** @deprecated Set pageContextInit.headersOriginal instead */ headers?: Record<string, string>;
};
type PageContextBegin = ReturnType<typeof getPageContextBegin>;
declare function renderPage<PageContextUserAdded extends {}, PageContextInitUser extends PageContextInit>(pageContextInit: PageContextInitUser): Promise<PageContextInitUser & {
    httpResponse: HttpResponse;
} & Partial<PageContextServer & PageContextUserAdded>>;
declare let asyncHookWrapper: <PageContext>(_httpRequestId: number, ret: () => Promise<PageContext>) => Promise<{
    pageContextReturn: Awaited<PageContext>;
}>;
declare function renderPage_addAsyncHookwrapper(wrapper: typeof asyncHookWrapper): void;
declare function getPageContextBegin(pageContextInit: PageContextInit, globalContext: GlobalContextServerInternal, httpRequestId: number): {
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: false;
    isPrerendering: boolean;
} & Pick<PageContextInternalServer, "urlOriginal" | "headersOriginal"> & {
    /** @deprecated Set `pageContextInit.urlOriginal` instead  */ url?: string;
    /** @deprecated Set pageContextInit.headersOriginal instead */ headers?: Record<string, string>;
} & {
    _globalContext: {
        isGlobalContext: true;
        _isOriginalObject: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../types/PageConfig.js").PageConfigRuntime[];
        _pageConfigGlobal: import("../../types/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        _vikeConfigPublicGlobal: {
            config: import("../../types/index.js").ConfigResolved;
            _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        };
        config: import("../../types/index.js").ConfigResolved;
        pages: {
            [k: string]: import("../../shared/page-configs/resolveVikeConfigPublic.js").VikeConfigPublicPageEager;
        };
    } & ({
        _isProduction: false;
        _isPrerendering: false;
        assetsManifest: null;
        _viteDevServer: import("vite").ViteDevServer;
        viteConfig: import("vite").ResolvedConfig;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    } | {
        _isPrerendering: true;
        viteConfig: import("vite").ResolvedConfig;
        _isProduction: true;
        assetsManifest: import("../../types/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    } | {
        _isPrerendering: false;
        viteConfig: null;
        _isProduction: true;
        assetsManifest: import("../../types/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    });
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _baseServer: string;
    _baseAssets: string;
    _pageContextInit: PageContextInit;
    _urlRewrite: null;
    _urlHandler: ((url: string) => string) | null;
    isClientSideNavigation: boolean;
} & {
    config: import("../../types/index.js").ConfigResolved;
    _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
} & {
    urlParsed: import("./utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & {
    headers: Record<string, string> | null;
} & {
    _httpRequestId: number;
};
