export { getVirtualFilePageConfigsEager };
import { getVirtualFileIdPageConfigLazy } from '../../../shared/virtualFiles/virtualFilePageConfigLazy.js';
import { debug } from './debug.js';
import { getVikeConfigInternal } from '../../shared/resolveVikeConfigInternal.js';
import { isRuntimeEnvMatch } from './isRuntimeEnvMatch.js';
import { serializeConfigValues } from '../../../../shared/page-configs/serialize/serializeConfigValues.js';
async function getVirtualFilePageConfigsEager(isForClientSide, isDev, id, isClientRouting) {
    const vikeConfig = await getVikeConfigInternal(true);
    const { _pageConfigs: pageConfigs, _pageConfigGlobal: pageConfigGlobal } = vikeConfig;
    return getCode(pageConfigs, pageConfigGlobal, isForClientSide, isDev, id, isClientRouting);
}
function getCode(pageConfigs, pageConfigGlobal, isForClientSide, isDev, id, isClientRouting) {
    const lines = [];
    const importStatements = [];
    const filesEnv = new Map();
    lines.push('export const pageConfigsSerialized = [');
    lines.push(getCodePageConfigsSerialized(pageConfigs, isForClientSide, isClientRouting, isDev, importStatements, filesEnv));
    lines.push('];');
    lines.push('export const pageConfigGlobalSerialized = {');
    lines.push(getCodePageConfigGlobalSerialized(pageConfigGlobal, isForClientSide, isClientRouting, isDev, importStatements, filesEnv));
    lines.push('};');
    const code = [...importStatements, ...lines].join('\n');
    debug(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
function getCodePageConfigsSerialized(pageConfigs, isForClientSide, isClientRouting, isDev, importStatements, filesEnv) {
    const lines = [];
    pageConfigs.forEach((pageConfig) => {
        const { pageId, routeFilesystem, isErrorPage } = pageConfig;
        lines.push(`  {`);
        lines.push(`    pageId: ${JSON.stringify(pageId)},`);
        lines.push(`    isErrorPage: ${JSON.stringify(isErrorPage)},`);
        lines.push(`    routeFilesystem: ${JSON.stringify(routeFilesystem)},`);
        const virtualFileId = JSON.stringify(getVirtualFileIdPageConfigLazy(pageId, isForClientSide));
        const load = `() => ({ moduleId: ${virtualFileId}, moduleExports: import(${virtualFileId}) })`;
        lines.push(`    loadConfigLazy: ${load},`);
        lines.push(`    configValuesSerialized: {`);
        lines.push(...serializeConfigValues(pageConfig, importStatements, filesEnv, (configEnv) => isRuntimeEnvMatch(configEnv, { isForClientSide, isClientRouting, isDev }), '    ', true));
        lines.push(`    },`);
        lines.push(`  },`);
    });
    const code = lines.join('\n');
    return code;
}
function getCodePageConfigGlobalSerialized(pageConfigGlobal, isForClientSide, isClientRouting, isDev, importStatements, filesEnv) {
    const lines = [];
    lines.push(`  configValuesSerialized: {`);
    lines.push(...serializeConfigValues(pageConfigGlobal, importStatements, filesEnv, (configEnv) => isRuntimeEnvMatch(configEnv, { isForClientSide, isClientRouting, isDev }), '    ', null));
    lines.push(`  },`);
    const code = lines.join('\n');
    return code;
}
