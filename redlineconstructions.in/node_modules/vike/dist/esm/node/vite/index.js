export default plugin;
export { plugin };
// TO-DO/next-major-release: remove
export { plugin as ssr };
export { getVikeConfig } from './shared/resolveVikeConfigInternal.js';
export { PROJECT_VERSION as version } from './utils.js';
import { assertUsage } from './utils.js';
import { pluginBuild } from './plugins/pluginBuild.js';
import { pluginPreview } from './plugins/pluginPreview.js';
import { pluginDev } from './plugins/pluginDev.js';
import { pluginVirtualFiles } from './plugins/pluginVirtualFiles.js';
import { pluginExtractAssets } from './plugins/pluginExtractAssets.js';
import { pluginExtractExportNames } from './plugins/pluginExtractExportNames.js';
import { pluginSetGlobalContext } from './plugins/pluginSetGlobalContext.js';
import { pluginCommon } from './plugins/pluginCommon.js';
import { pluginBaseUrls } from './plugins/pluginBaseUrls.js';
import { pluginEnvVars } from './plugins/pluginEnvVars.js';
import pc from '@brillout/picocolors';
import { pluginFileEnv } from './plugins/pluginFileEnv.js';
import { setResolveClientEntriesDev } from '../runtime/renderPage/getPageAssets.js';
import { resolveClientEntriesDev } from './shared/resolveClientEntriesDev.js';
import { pluginWorkaroundCssModuleHmr } from './plugins/pluginWorkaroundCssModuleHmr.js';
import { pluginWorkaroundVite6HmrRegression } from './plugins/pluginWorkaroundVite6HmrRegression.js';
import { pluginReplaceConstants } from './plugins/pluginReplaceConstants.js';
// We don't call this in ./onLoad.ts to avoid a cyclic dependency with utils.ts
setResolveClientEntriesDev(resolveClientEntriesDev);
// Return `PluginInterop` instead of `Plugin` to avoid type mismatch upon different Vite versions
function plugin(vikeVitePluginOptions = {}) {
    const plugins = [
        ...pluginCommon(vikeVitePluginOptions),
        pluginVirtualFiles(),
        ...pluginDev(),
        ...pluginBuild(),
        pluginPreview(),
        ...pluginExtractAssets(),
        pluginExtractExportNames(),
        ...pluginSetGlobalContext(),
        pluginBaseUrls(),
        pluginEnvVars(),
        pluginFileEnv(),
        pluginWorkaroundCssModuleHmr(),
        pluginWorkaroundVite6HmrRegression(),
        pluginReplaceConstants(),
    ];
    Object.assign(plugins, { _vikeVitePluginOptions: vikeVitePluginOptions });
    return plugins;
}
// Error upon wrong usage
Object.defineProperty(plugin, 'apply', {
    enumerable: true,
    get: () => {
        assertUsage(false, `Add ${pc.cyan('vike()')} instead of ${pc.cyan('vike')} to vite.config.js#plugins (i.e. call the function and add the return value instead of adding the function itself)`, { showStackTrace: true });
    },
});
// CJS default export `const vike = require('vike/plugin')`
//  - It needs to live at the end of this file, in order to ensure we do it after all assignments to `exports`.
try {
    module.exports = Object.assign(exports.default, exports);
}
catch { }
