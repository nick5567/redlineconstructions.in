export { logViteAny };
export { logViteError };
export { logConfigInfo };
export { logConfigError };
export { logConfigErrorRecover };
export { logErrorDebugNote };
export type { LogInfo };
export type { LogInfoArgs };
export type { LogError };
export type { LogErrorArgs };
export type { LogType };
export type { LogCategory };
type LogType = 'info' | 'warn' | 'error' | 'error-recover';
type LogCategory = 'config' | `request(${number})`;
type LogInfo = (...args: LogInfoArgs) => void;
type LogInfoArgs = Parameters<typeof logRuntimeInfo>;
type LogError = (...args: LogErrorArgs) => void;
type LogErrorArgs = Parameters<typeof logRuntimeError>;
declare function logRuntimeInfo(msg: string, httpRequestId: number | null, logType: LogType): void;
declare function logViteAny(msg: string, logType: LogType, httpRequestId: number | null, prependViteTag: boolean): void;
declare function logConfigInfo(msg: string, logType: LogType): void;
declare function logConfigErrorRecover(): void;
declare function logRuntimeError(err: unknown, httpRequestId: number | null): void;
declare function logViteError(err: unknown, httpRequestId: number | undefined): void;
declare function logConfigError(err: unknown): void;
/** Note shown to user when vike does something risky:
 *  - When vike dedupes (i.e. swallows) an error with getHttpRequestAsyncStore().shouldErrorBeSwallowed(err)
 *  - When vike modifies the error with getPrettyErrorWithCodeSnippet(err)
 */
declare function logErrorDebugNote(): void;
