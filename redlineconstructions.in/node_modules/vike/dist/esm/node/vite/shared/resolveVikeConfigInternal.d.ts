export { getVikeConfigInternal };
export { getVikeConfigInternalOptional };
export { getVikeConfigInternalSync };
export { setVikeConfigContext };
export { reloadVikeConfig };
export { isV1Design };
export { getConfVal };
export { getConfigDefinitionOptional };
export { getVikeConfigFromCliOrEnv };
export { isOverridden };
export type { VikeConfigInternal };
export { getVikeConfig };
export type { VikeConfig };
import type { PageConfigGlobalBuildTime, ConfigValueSource, PageConfigBuildTime } from '../../../types/PageConfig.js';
import { type ConfigDefinitionsInternal, type ConfigDefinitionInternal } from './resolveVikeConfigInternal/configDefinitionsBuiltIn.js';
import { type VikeConfigPublicGlobal, type VikeConfigPublicPageEager } from '../../../shared/page-configs/resolveVikeConfigPublic.js';
import { type PlusFile } from './resolveVikeConfigInternal/getPlusFilesAll.js';
import type { PrerenderContextPublic } from '../../prerender/runPrerender.js';
import type { ResolvedConfig, UserConfig } from 'vite';
type VikeConfigContext = {
    userRootDir: string;
    isDev: boolean;
    vikeVitePluginOptions: unknown;
};
type PrerenderContext = {
    isPrerenderingEnabled: boolean;
    isPrerenderingEnabledForAllPages: boolean;
} & ({
    [K in keyof PrerenderContextPublic]: null;
} | PrerenderContextPublic);
type VikeConfigInternal = {
    _pageConfigs: PageConfigBuildTime[];
    _pageConfigGlobal: PageConfigGlobalBuildTime;
    config: VikeConfigPublicGlobal['config'];
    _from: VikeConfigPublicGlobal['_from'];
    pages: Record<string, // pageId
    VikeConfigPublicPageEager>;
    _vikeConfigDependencies: Set<string>;
    prerenderContext: PrerenderContext;
};
declare function reloadVikeConfig(): void;
declare function getVikeConfigInternal(doNotRestartViteOnError?: boolean): Promise<VikeConfigInternal>;
declare function getVikeConfigInternalSync(): VikeConfigInternal;
/**
 * Get all the information Vike knows about the app in your Vite plugin.
 *
 * https://vike.dev/getVikeConfig
 */
declare function getVikeConfig(config: ResolvedConfig | UserConfig): VikeConfig;
type VikeConfig = Pick<VikeConfigInternal, 'config' | 'pages' | 'prerenderContext'>;
declare function setVikeConfigContext(vikeConfigCtx_: VikeConfigContext): void;
declare function getVikeConfigInternalOptional(): Promise<null | VikeConfigInternal>;
declare function isV1Design(): boolean;
declare function getVikeConfigFromCliOrEnv(): {
    vikeConfigFromCliOrEnv: {
        [x: string]: unknown;
    };
    configFromCliOptions: import("../../cli/parseCli.js").CliOptions | null;
    configFromEnvVar: Record<string, unknown> | null;
};
declare function getConfigDefinitionOptional(configDefinitions: ConfigDefinitionsInternal, configName: string): ConfigDefinitionInternal | null;
declare function getConfVal(plusFile: PlusFile, configName: string): null | {
    value: unknown;
    valueIsLoaded: true;
} | {
    valueIsLoaded: false;
};
declare function isOverridden(source: ConfigValueSource, configName: string, pageConfig: PageConfigBuildTime | PageConfigGlobalBuildTime): boolean;
