export { getHookFromPageContext };
export { getHookFromPageContextNew };
export { getHookFromPageConfig };
export { getHookFromPageConfigGlobal };
export { getHookFromPageConfigGlobalCumulative };
export { getHook_setIsPrerenderering };
export type { Hook };
export type { HookLoc };
export type { HookTimeout };
export type { HooksTimeoutProvidedByUser };
export { getHookTimeoutDefault };
import type { VikeConfigPublicPageLazy } from '../getPageFiles.js';
import type { HookNameOld, HookNamePage, HookNameGlobal, HookName } from '../../types/Config.js';
import type { PageConfigGlobalRuntime, PageConfigRuntime } from '../../types/PageConfig.js';
import type { GlobalContextPrepareMinimum } from '../prepareGlobalContextForPublicUsage.js';
import type { PageContextPrepareMinimum } from '../preparePageContextForPublicUsage.js';
type Hook = HookLoc & {
    hookFn: HookFn;
    hookTimeout: HookTimeout;
};
type HookLoc = {
    hookName: HookNameOld;
    hookFilePath: string;
};
type HookFn = (arg: PageContextPrepareMinimum | GlobalContextPrepareMinimum) => unknown;
type HookTimeout = {
    error: number | false;
    warning: number | false;
};
type HooksTimeoutProvidedByUser = false | Partial<Record<HookNameOld, false | Partial<HookTimeout>>>;
declare function getHookFromPageContext(pageContext: VikeConfigPublicPageLazy, hookName: HookNameOld): null | Hook;
declare function getHookFromPageContextNew(hookName: HookName, pageContext: VikeConfigPublicPageLazy): Hook[];
declare function getHookFromPageConfig(pageConfig: PageConfigRuntime, hookName: HookNamePage): null | Hook;
declare function getHookFromPageConfigGlobal(pageConfigGlobal: PageConfigGlobalRuntime, hookName: HookNameGlobal): null | Hook;
declare function getHookFromPageConfigGlobalCumulative(pageConfigGlobal: PageConfigGlobalRuntime, hookName: HookNameGlobal): Hook[];
declare function getHookTimeoutDefault(hookName: HookNameOld): HookTimeout;
declare function getHook_setIsPrerenderering(): void;
