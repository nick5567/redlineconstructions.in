export { route };
export type { PageContextForRoute };
export type { PageContextFromRoute };
export type { PageRoutes };
export type { RouteMatches };
import { type PageContextUrlInternal, type PageContextUrlSource } from '../getPageContextUrlComputed.js';
import type { PageRoutes, RouteType } from './loadPageRoutes.js';
import type { GlobalContextInternal } from '../createGlobalContextShared.js';
type PageContextForRoute = PageContextUrlInternal & {
    _globalContext: GlobalContextInternal;
} & PageContextUrlSource;
type PageContextFromRoute = {
    pageId: string | null;
    routeParams: Record<string, string>;
    _routingProvidedByOnBeforeRouteHook?: boolean;
    _debugRouteMatches: RouteMatches;
};
type RouteMatch = {
    pageId: string;
    routeString?: string;
    precedence?: number | null;
    routeType: RouteType;
    routeParams: Record<string, string>;
};
type RouteMatches = 'CUSTOM_ROUTING' | RouteMatch[];
declare function route(pageContext: PageContextForRoute, skipOnBeforeRouteHook?: true): Promise<PageContextFromRoute>;
