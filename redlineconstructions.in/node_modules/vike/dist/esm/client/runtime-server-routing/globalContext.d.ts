export { getGlobalContextClientInternal };
export type { GlobalContextClientWithServerRouting };
export type { GlobalContextClientInternalWithServerRouting };
import type { GlobalContextBasePublic } from '../../shared/createGlobalContextShared.js';
type GlobalContextClientWithServerRouting = GlobalContextBasePublic & Pick<GlobalContextClientInternalWithServerRouting, 'isClientSide'> & Vike.GlobalContext & Vike.GlobalContextClient & {};
type GlobalContextClientInternalWithServerRouting = Awaited<ReturnType<typeof getGlobalContextClientInternal>>;
declare const getGlobalContextClientInternal: () => Promise<{
    isGlobalContext: true;
    _isOriginalObject: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../types/PageConfig.js").PageConfigRuntime[];
    _pageConfigGlobal: import("../../types/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    _vikeConfigPublicGlobal: {
        config: import("../../types/index.js").ConfigResolved;
        _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
        _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
        _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
    };
    config: import("../../types/index.js").ConfigResolved;
    pages: {
        [k: string]: import("../../shared/page-configs/resolveVikeConfigPublic.js").VikeConfigPublicPageEager;
    };
} & {
    isClientSide: true;
} & object>;
