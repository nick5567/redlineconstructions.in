export { createPageContextClientSide };
declare function createPageContextClientSide(): Promise<{
    _isOriginalObject: true;
    isPageContext: true;
} & {
    isClientSide: true;
    isPrerendering: false;
    isHydration: true;
    _globalContext: {
        isGlobalContext: true;
        _isOriginalObject: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../types/PageConfig.js").PageConfigRuntime[];
        _pageConfigGlobal: import("../../types/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        _vikeConfigPublicGlobal: {
            config: import("../../types/index.js").ConfigResolved;
            _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
            _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
            _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
        };
        config: import("../../types/index.js").ConfigResolved;
        pages: {
            [k: string]: import("../../shared/page-configs/resolveVikeConfigPublic.js").VikeConfigPublicPageEager;
        };
    } & {
        isClientSide: true;
    } & object;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    isBackwardNavigation: null;
    _hasPageContextFromServer: true;
} & {
    pageId: string;
    routeParams: Record<string, string>;
} & {
    config: import("../../types/index.js").ConfigResolved;
    _source: import("../../shared/page-configs/resolveVikeConfigPublic.js").Source;
    _sources: import("../../shared/page-configs/resolveVikeConfigPublic.js").Sources;
    _from: import("../../shared/page-configs/resolveVikeConfigPublic.js").From;
} & import("../../shared/getPageFiles.js").VikeConfigPublicPageLazy & {
    _pageFilesLoaded: import("../../shared/getPageFiles.js").PageFile[];
}>;
