export { createPageContextClientSide };
import { createPageContextObject, createPageContextShared } from '../../shared/createPageContextShared.js';
import { getPageContextUrlComputed } from '../../shared/getPageContextUrlComputed.js';
import { getBaseServer } from './getBaseServer.js';
import { getGlobalContextClientInternal } from './globalContext.js';
import { assert, augmentType, isBaseServer, objectAssign } from './utils.js';
async function createPageContextClientSide(urlOriginal) {
    const globalContext = await getGlobalContextClientInternal();
    const baseServer = getBaseServer();
    assert(isBaseServer(baseServer));
    const pageContextCreated = createPageContextObject();
    objectAssign(pageContextCreated, {
        isClientSide: true,
        isPrerendering: false,
        urlOriginal,
        _globalContext: globalContext,
        _pageFilesAll: globalContext._pageFilesAll, // TO-DO/next-major-release: remove
        _urlHandler: null,
        _urlRewrite: null,
        _baseServer: baseServer,
    });
    const pageContextUrlComputed = getPageContextUrlComputed(pageContextCreated);
    objectAssign(pageContextCreated, pageContextUrlComputed);
    const pageContextAugmented = createPageContextShared(pageContextCreated, globalContext._vikeConfigPublicGlobal);
    augmentType(pageContextCreated, pageContextAugmented);
    return pageContextCreated;
}
