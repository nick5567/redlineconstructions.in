"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginDistFileNames = pluginDistFileNames;
// Attempt to preserve file structure of `.page.js` files:
//  - https://github.com/vikejs/vike/commit/11a4c49e5403aa7c37c8020c462b499425b41854
//  - Blocker: https://github.com/rollup/rollup/issues/4724
const utils_js_1 = require("../../utils.js");
const node_path_1 = __importDefault(require("node:path"));
const node_crypto_1 = __importDefault(require("node:crypto"));
const getAssetsDir_js_1 = require("../../shared/getAssetsDir.js");
const getFilePath_js_1 = require("../../shared/getFilePath.js");
function pluginDistFileNames() {
    return {
        name: 'vike:build:pluginDistFileNames',
        apply: 'build',
        enforce: 'post',
        configResolved(config) {
            const rollupOutputs = getRollupOutputs(config);
            // We need to support multiple outputs: @vite/plugin-legacy adds an output, see https://github.com/vikejs/vike/issues/477#issuecomment-1406434802
            rollupOutputs.forEach((rollupOutput) => {
                if (!('entryFileNames' in rollupOutput)) {
                    rollupOutput.entryFileNames = (chunkInfo) => getEntryFileName(chunkInfo, config, true);
                }
                if (!('chunkFileNames' in rollupOutput)) {
                    rollupOutput.chunkFileNames = (chunkInfo) => getChunkFileName(chunkInfo, config);
                }
                if (!('assetFileNames' in rollupOutput)) {
                    rollupOutput.assetFileNames = (chunkInfo) => getAssetFileName(chunkInfo, config);
                    rollupOutput.assetFileNames.isTheOneSetByVike = true;
                    (0, utils_js_1.assert)(rollupOutput.assetFileNames.isTheOneSetByVike);
                }
                else {
                    // If a user needs this:
                    //  - assertUsage() that the naming provided by the user ends with `.[hash][extname]`
                    //    - It's needed for getHash() of handleAssetsManifest()
                    //    - Asset URLs should always contain a hash: it's paramount for caching assets.
                    //    - If rollupOutput.assetFileNames is a function then use a wrapper function to apply the assertUsage()
                    (0, utils_js_1.assertUsage)(rollupOutput.assetFileNames.isTheOneSetByVike, "Setting Vite's configuration build.rollupOptions.output.assetFileNames is currently forbidden. Reach out if you need to use it.");
                }
                {
                    const manualChunksOriginal = rollupOutput.manualChunks;
                    rollupOutput.manualChunks = function (id, ...args) {
                        if (manualChunksOriginal) {
                            if ((0, utils_js_1.isCallable)(manualChunksOriginal)) {
                                const result = manualChunksOriginal.call(this, id, ...args);
                                if (result !== undefined)
                                    return result;
                            }
                            else {
                                (0, utils_js_1.assertUsage)(false, "The Vite's configuration build.rollupOptions.output.manualChunks must be a function. Reach out if you need to set it to another value.");
                            }
                        }
                        // Disable CSS bundling to workaround https://github.com/vikejs/vike/issues/1815
                        // TO-DO/eventually: let's bundle CSS again once Rolldown replaces Rollup
                        if (id.endsWith('.css')) {
                            const userRootDir = config.root;
                            if (id.startsWith(userRootDir)) {
                                (0, utils_js_1.assertPosixPath)(id);
                                (0, getFilePath_js_1.assertModuleId)(id);
                                let name;
                                const isNodeModules = id.match(/node_modules\/([^\/]+)\/(?!.*node_modules)/);
                                if (isNodeModules) {
                                    name = isNodeModules[1];
                                }
                                else {
                                    const filePath = (0, getFilePath_js_1.getModuleFilePathAbsolute)(id, config);
                                    name = filePath;
                                    name = name.split('.').slice(0, -1).join('.'); // remove file extension
                                    name = name.split('/').filter(Boolean).join('_');
                                }
                                // Make fileHash the same between local development and CI
                                const idStable = node_path_1.default.posix.relative(userRootDir, id);
                                // Don't remove `?` queries because each `id` should belong to a unique bundle.
                                const hash = getIdHash(idStable);
                                return `${name}-${hash}`;
                            }
                            else {
                                let name;
                                const isVirtualModule = id.match(/virtual:([^:]+):/);
                                if (isVirtualModule) {
                                    name = isVirtualModule[1];
                                    (0, utils_js_1.assert)(name);
                                }
                                else if (
                                // https://github.com/vikejs/vike/issues/1818#issuecomment-2298478321
                                id.startsWith('/__uno')) {
                                    name = 'uno';
                                }
                                else {
                                    name = 'style';
                                }
                                const hash = getIdHash(id);
                                return `${name}-${hash}`;
                            }
                        }
                    };
                }
            });
        },
    };
}
function getIdHash(id) {
    return node_crypto_1.default.createHash('md5').update(id).digest('hex').slice(0, 8);
}
function getAssetFileName(assetInfo, config) {
    const assetsDir = (0, getAssetsDir_js_1.getAssetsDir)(config);
    const dir = assetsDir + '/static';
    let { name } = assetInfo;
    if (!name) {
        return `${dir}/[name].[hash][extname]`;
    }
    // https://github.com/vikejs/vike/issues/794
    (0, utils_js_1.assertPosixPath)(name);
    name = node_path_1.default.posix.basename(name);
    // dist/client/assets/index.page.server.jsx_extractAssets_lang.e4e33422.css
    // => dist/client/assets/index.page.server.e4e33422.css
    if (
    // Vite 2
    name?.endsWith('_extractAssets_lang.css') ||
        // Vite 3
        name?.endsWith('?extractAssets&lang.css')) {
        name = name.split('.').slice(0, -2).join('.');
        name = clean(name);
        return `${dir}/${name}.[hash][extname]`;
    }
    name = name.split('.').slice(0, -1).join('.');
    name = clean(name);
    return `${dir}/${name}.[hash][extname]`;
}
function getChunkFileName(_chunkInfo, config) {
    const isForClientSide = !config.build.ssr;
    let name = 'chunks/chunk-[hash].js';
    if (isForClientSide) {
        const assetsDir = (0, getAssetsDir_js_1.getAssetsDir)(config);
        name = `${assetsDir}/${name}`;
    }
    return name;
}
function getEntryFileName(chunkInfo, config, isEntry) {
    const assetsDir = (0, getAssetsDir_js_1.getAssetsDir)(config);
    const isForClientSide = !config.build.ssr;
    let { name } = chunkInfo;
    (0, utils_js_1.assertPosixPath)(name);
    name = clean(name, true, 
    // Not needed for client-side because dist/ filenames contain `.[hash].js`
    !isForClientSide);
    if (isForClientSide) {
        return `${assetsDir}/${name}.[hash].js`;
    }
    else {
        return `${name}.${isEntry ? 'mjs' : 'js'}`;
    }
}
function removePathSeparators(name) {
    (0, utils_js_1.assertPosixPath)(name);
    (0, utils_js_1.assert)(!name.startsWith('/'));
    const entryDir = 'entries/';
    const hasEntryDir = name.startsWith(entryDir);
    if (hasEntryDir) {
        name = name.slice(entryDir.length);
        (0, utils_js_1.assert)(!name.startsWith('/'));
    }
    name = name.split('/').join('_');
    if (hasEntryDir) {
        name = `${entryDir}${name}`;
    }
    return name;
}
function clean(name, removePathSep, fixGlob) {
    name = fixExtractAssetsQuery(name);
    if (fixGlob) {
        name = workaroundGlob(name);
    }
    name = replaceNonLatinCharacters(name);
    if (removePathSep) {
        name = removePathSeparators(name);
    }
    name = removeLeadingUnderscoreInFilename(name);
    name = removeUnderscoreDoublets(name);
    // Avoid:
    // ```
    // dist/client/assets/entries/.Dp9wM6PK.js
    // dist/server/entries/.mjs
    // ```
    (0, utils_js_1.assert)(!name.endsWith('/'));
    return name;
}
function fixExtractAssetsQuery(name) {
    name = name.replace(/\.[^\.]*_extractAssets_lang$/, '.extractAssets');
    return name;
}
function removeUnderscoreDoublets(name) {
    name = name.split(/__+/).join('_');
    return name;
}
function replaceNonLatinCharacters(name) {
    name = name.split('+').join('');
    name = name.replace(/[^a-zA-Z0-9\/\._]/g, '-');
    return name;
}
// Remove leading `_` from filename
//  - GitHub Pages treat URLs with filename starting with `_` differently (removing the need for workaround of creating a .jekyll file)
function removeLeadingUnderscoreInFilename(name) {
    (0, utils_js_1.assertPosixPath)(name);
    const paths = name.split('/');
    {
        const last = paths.length - 1;
        let filename = paths[last];
        if (filename.startsWith('_')) {
            filename = filename.slice(1);
            paths[last] = filename;
            name = paths.join('/');
        }
    }
    return name;
}
// Ensure import.meta.glob() doesn't match dist/ files
function workaroundGlob(name) {
    // V1 design
    name = name.split('+').join('');
    ['client', 'server', 'route'].forEach((env) => {
        name = name.split(`.page.${env}`).join(`-page-${env}`);
    });
    name = name.split('.page.').join('-page.');
    name = name.replace(/\.page$/, '-page');
    return name;
}
function getRollupOutputs(config) {
    var _a, _b;
    // @ts-expect-error is read-only
    config.build ?? (config.build = {});
    (_a = config.build).rollupOptions ?? (_a.rollupOptions = {});
    (_b = config.build.rollupOptions).output ?? (_b.output = {});
    const { output } = config.build.rollupOptions;
    if (!(0, utils_js_1.isArray)(output)) {
        return [output];
    }
    return output;
}
