"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginSetGlobalContext = pluginSetGlobalContext;
const globalContext_js_1 = require("../../runtime/globalContext.js");
const utils_js_1 = require("../utils.js");
const resolveVikeConfigInternal_js_1 = require("../shared/resolveVikeConfigInternal.js");
const getViteConfigRuntime_js_1 = require("../shared/getViteConfigRuntime.js");
function pluginSetGlobalContext() {
    let isServerReload = false;
    return [
        {
            name: 'vike:pluginSetGlobalContext:pre',
            enforce: 'pre',
            // This hook is called not only at server start but also at server restart (a new `viteDevServer` instance is created)
            configureServer: {
                order: 'pre',
                handler(viteDevServer) {
                    if (isServerReload)
                        (0, resolveVikeConfigInternal_js_1.reloadVikeConfig)();
                    isServerReload = true;
                    (0, globalContext_js_1.setGlobalContext_viteDevServer)(viteDevServer);
                    (0, utils_js_1.markSetup_viteDevServer)();
                },
            },
            configurePreviewServer() {
                (0, utils_js_1.markSetup_vitePreviewServer)();
            },
            config: {
                order: 'pre',
                handler(_, env) {
                    const isViteDev = (0, utils_js_1.isDevCheck)(env);
                    (0, globalContext_js_1.setGlobalContext_isProduction)(!isViteDev);
                    (0, utils_js_1.markSetup_isViteDev)(isViteDev);
                },
            },
        },
        {
            name: 'vike:pluginSetGlobalContext:post',
            enforce: 'post',
            configResolved: {
                order: 'post',
                async handler(config) {
                    const viteConfigRuntime = (0, getViteConfigRuntime_js_1.getViteConfigRuntime)(config);
                    (0, globalContext_js_1.setGlobalContext_viteConfig)(config, viteConfigRuntime);
                },
            },
        },
    ];
}
