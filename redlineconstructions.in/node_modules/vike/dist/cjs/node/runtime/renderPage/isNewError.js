"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNewError = isNewError;
exports.setAlreadyLogged = setAlreadyLogged;
exports.hasAlreadyLogged = hasAlreadyLogged;
const utils_js_1 = require("../utils.js");
const globalObject = (0, utils_js_1.getGlobalObject)('renderPage/isNewError.ts', {
    wasAlreadyLogged: new WeakSet(),
});
function isNewError(errErrorPage, errNominalPage) {
    (0, utils_js_1.warnIfErrorIsNotObject)(errErrorPage);
    return (!(0, utils_js_1.isSameErrorMessage)(errNominalPage, errErrorPage) ||
        // Isn't this redudant/superfluous? I think we can remove this entire file and only use isSameErrorMessage() instead.
        !hasAlreadyLogged(errNominalPage));
}
function hasAlreadyLogged(err) {
    if (!(0, utils_js_1.isObject)(err))
        return false;
    return globalObject.wasAlreadyLogged.has(err);
}
function setAlreadyLogged(err) {
    if (!(0, utils_js_1.isObject)(err))
        return;
    globalObject.wasAlreadyLogged.add(err);
}
