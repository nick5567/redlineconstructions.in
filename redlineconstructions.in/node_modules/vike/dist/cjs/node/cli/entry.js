"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("./utils.js");
const index_js_1 = require("../api/index.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const parseCli_js_1 = require("./parseCli.js");
const context_js_1 = require("./context.js");
cli();
async function cli() {
    const { command, cliOptions } = (0, parseCli_js_1.parseCli)();
    (0, context_js_1.setContextCliCommand)(command, cliOptions);
    if (command === 'dev') {
        await cmdDev();
    }
    else if (command === 'build') {
        await cmdBuild();
    }
    else if (command === 'preview') {
        await cmdPreview();
    }
    else if (command === 'prerender') {
        await cmdPrerender();
    }
}
async function cmdDev() {
    const startTime = performance.now();
    try {
        const { viteServer } = await (0, index_js_1.dev)();
        if (viteServer.httpServer) {
            await viteServer.listen();
            const info = viteServer.config.logger.info;
            const startupDurationString = picocolors_1.default.dim(`ready in ${picocolors_1.default.reset(picocolors_1.default.bold(String(Math.ceil(performance.now() - startTime))))} ms`);
            const hasExistingLogs = process.stdout.bytesWritten > 0 || process.stderr.bytesWritten > 0;
            info(`  ${picocolors_1.default.yellow(`${picocolors_1.default.bold('Vike')} v${utils_js_1.PROJECT_VERSION}`)}  ${startupDurationString}\n`, {
                clear: !hasExistingLogs,
            });
            viteServer.printUrls();
        }
        else {
            // vike-server => middleware mode => `viteServer.httpServer === null`
        }
        viteServer.bindCLIShortcuts({ print: true });
    }
    catch (err) {
        console.error(picocolors_1.default.red(`Error while starting dev server:`));
        // Error comes from Vite; no need to use logErrorHint()
        console.error(err);
        process.exit(1);
    }
}
async function cmdBuild() {
    try {
        await (0, index_js_1.build)();
    }
    catch (err) {
        console.error(picocolors_1.default.red(`Error during build:`));
        // Error comes from Vite; no need to use logErrorHint()
        console.error(err);
        process.exit(1);
    }
    // See comments at runPrerender_forceExit()
    process.exit(0);
}
async function cmdPreview() {
    try {
        const { viteServer } = await (0, index_js_1.preview)();
        if (viteServer) {
            viteServer.printUrls();
            viteServer.bindCLIShortcuts({ print: true });
        }
    }
    catch (err) {
        console.error(picocolors_1.default.red(`Error while starting preview server:`));
        // Error comes from Vite; no need to use logErrorHint()
        console.error(err);
        process.exit(1);
    }
}
async function cmdPrerender() {
    const { runPrerenderFromCLIPrerenderCommand } = await Promise.resolve().then(() => __importStar(require('../prerender/runPrerenderEntry.js')));
    await runPrerenderFromCLIPrerenderCommand();
}
process.on('unhandledRejection', (rejectValue) => {
    throw rejectValue;
});
